#!/bin/sh
# Starving the beast on ethernet v.000002
# Place this file in /etc/network/if-up.d NetworkManager will call it
# for you automagically when the interface is brought up.

# It would be a good idea to call something on interface down, too.
# But I haven't written it yet.

# Today's ethernet device drivers are over-optimized for 1000Mbit
# If you are unfortunate enough to run at less than that
# you are going to lose on latency. As one example you will
# have over 130ms latency under load with the default settings in the e1000e
# driver - common to many laptops. 

# To force your network device to 100Mbit 
# (so you can test and then bitch about bloat in your driver)
# ethtool -s your_device advertise 0x008
# It will then stay stuck at 100Mbit until you change it back.
# It also helps to lower your ring buffer as far as it will go
# ethtool -G your_device tx 64 # or lower if you can
# And after doing all that you wil be lucky to get 120ms latency under load.

# So I have also built byte queue limits into my kernels at
# http://www.teklibre.com/~d/tnq

# Adding in the below, without byte queue limits enabled, and cbq, gets you to
# around 12ms. With byte queue limits, I can get to ~4-6 ms latency under load.
# However, (less often of late), I sometimes end up at 130ms. 
# It would be my hope, with some more tuning (QFQ?), better SFQ setup?
# to get below 1 ms.

debloat_ethernet() {
percent=92
txqueuelen=100
bytelimit=64000

speed=`cat /sys/class/net/$IFACE/speed`
mtu=`ip -o link show dev $IFACE | awk '{print $5;}'`
bytelimit=`expr $mtu '*' 3`

[ $speed -lt 1001 ] && { percent=94; txqueuelen=100; }
if [ $speed -lt 101 ] 
then
	percent=92; 
	txqueuelen=50; 

fi

#[ $speed -lt 11 ] && { percent=90; txqueuelen=20; }

newspeed=`expr $speed \* $percent / 100`

modprobe sch_cbq
modprobe sch_sfq
modprobe sch_qfq # I can't get QFQ to work

# Doing this twice kicks the driver harder. Sometimes it gets stuck otherwise

ifconfig $IFACE txqueuelen $txqueuelen
tc qdisc del dev $IFACE root
ifconfig $IFACE txqueuelen $txqueuelen

tc qdisc del dev $IFACE root
#tc qdisc add dev $IFACE root handle 1 cbq bandwidth ${newspeed}mbit avpkt 1524
#tc qdisc add dev $IFACE parent 1: handle 10 sfq

if [ -e /sys/class/net/$IFACE/queues/tx-0/byte_queue_limits ]
then
	for i in /sys/class/net/$IFACE/queues/tx-*/byte_queue_limits
	do
		echo $bytelimit > $i/limit_max
	done

	tc qdisc add dev $IFACE handle 1 root sfq
else

tc qdisc add dev $IFACE root handle 1 cbq bandwidth ${newspeed}mbit avpkt 1524
tc qdisc add dev $IFACE parent 1: handle 10 sfq

fi

}

debloat_wireless() {

# HAH. Like any of this helps wireless

exit

percent=92
txqueuelen=100
speed=`cat /sys/class/net/$IFACE/speed`
[ $speed -lt 1001 ] && { percent=94; txqueuelen=100; }
[ $speed -lt 101 ] && { percent=93; txqueuelen=50; }
[ $speed -lt 11 ] && { percent=90; txqueuelen=20; }

newspeed=`expr $speed \* $percent / 100`

#echo $newspeed

modprobe sch_cbq
modprobe sch_sfq
modprobe sch_qfq

# Just this much would help. If wireless had a 'speed'
ifconfig $IFACE txqueuelen $txqueuelen

}

if [ -h /sys/class/net/$IFACE/phy80211 ]
then
	debloat_wireless
else
	debloat_ethernet
fi

